require 'fileutils'

include FileUtils

# Generated by Buildr 1.3.4, change to your liking
# Version number for this release
VERSION_NUMBER = "15.2.0"

# Group identifier for your projects
GROUP = "cruise"

GO_TRUNK_DIRNAME = ENV['GO_TRUNK_DIR'] || 'gocd'
GO_PLUGINS_DIRNAME = ENV['GO_PLUGINS_DIR'] || 'go-plugins'

FIREFOX_BROWSER = ENV['twist_in_firefox'] || 'N'

$USE_TLB = (ENV['load_balance'] == 'yes')

#discover the revision and commit digest
def stdout_of command
  Util.win_os? && command.gsub!(/'/, '"')
  stdout = `#{command}`
  $?.success? || fail("`#{command}` failed")
  stdout
end

def drop_recreate_pgsql_db
  (puts "Not recreating DB since PostgreSQL is not being used."; return) if ENV['USE_POSTGRESQL'] != 'Y'

  generated_db_name="#{ENV['DB_NAME_PREFIX']}__#{ENV['GO_JOB_NAME']}__#{ENV['GO_STAGE_NAME']}__#{ENV['GO_PIPELINE_NAME']}".gsub(/[^0-9a-zA-Z]/, "_")[0..62]
  ENV['POSTGRES_DB_NAME_TO_USE'] = "#{ENV['DB_NAME_PREFIX'] ? generated_db_name : "cruise"}"
  ENV['POSTGRES_DB_HOST_TO_USE'] = "#{ENV['DB_HOST'] || "localhost"}"

  puts "Using DB: #{ENV['POSTGRES_DB_NAME_TO_USE']} on host: #{ENV['POSTGRES_DB_HOST_TO_USE']}"

  drop_db_command = "java -jar tools/run_with_postgres.jar #{ENV['POSTGRES_DB_HOST_TO_USE']} 5432 '' postgres '' 'DROP DATABASE IF EXISTS #{ENV['POSTGRES_DB_NAME_TO_USE']}'"
  create_db_command = "java -jar tools/run_with_postgres.jar #{ENV['POSTGRES_DB_HOST_TO_USE']} 5432 '' postgres '' 'CREATE DATABASE #{ENV['POSTGRES_DB_NAME_TO_USE']}'"
  system("#{drop_db_command} && #{create_db_command}") || (puts "Failed to drop and recreate DB. Tried running: #{drop_db_command} && #{create_db_command}"; exit 1)

  puts "Recreated DB: #{ENV['POSTGRES_DB_NAME_TO_USE']}"
end

# Specify Maven 2.0 remote repositories here, like this: 
repositories.remote << "http://mirrors.ibiblio.org/maven2/"

drop_recreate_pgsql_db

desc "The Cruise project"
define "cruise" do |project|
  compile.options[:other] = %w[-encoding UTF-8]
  TMP_DIR = test.options[:properties]['java.io.tmpdir'] = _('target/temp')
  mkpath TMP_DIR

  manifest['Cruise-Version'] = VERSION_NUMBER

  project.version = VERSION_NUMBER
  project.group = GROUP

  $USE_TLB && enable_tlb

  if (Util.win_os?)
		if (FIREFOX_BROWSER == 'N')
			cp(_('cruise-twist-new','src', 'twist.win.properties'), _('target', 'twist.properties'))
		end
		if (FIREFOX_BROWSER == 'Y')
			cp(_('cruise-twist-new','src', 'twist.firefox.win.properties'), _('target', 'twist.properties'))
		end


 end

  clean do
    mkpath TMP_DIR
  end
end
task :copy_plugins do
  mkdir_p "target/go-server-#{VERSION_NUMBER}/plugins/external"
  cp_r "../#{GO_PLUGINS_DIRNAME}/target/go-plugins-dist/.", "target/go-server-#{VERSION_NUMBER}/plugins/external"
  rm "target/go-server-#{VERSION_NUMBER}/plugins/external/yum-repo-exec-poller.jar"
end

task :copy_server do
  mkdir_p "target"
  cp_r "../#{GO_TRUNK_DIRNAME}/target/go-server-#{VERSION_NUMBER}", "target"
end

task :copy_agent do
  mkdir_p "target"
  cp_r "../#{GO_TRUNK_DIRNAME}/target/go-agent-#{VERSION_NUMBER}", "target"
end

task :setup => [:copy_agent, :copy_server, :copy_plugins] do
end

task :kill_server do
  if Util.win_os?
    system("target\go-server-#{VERSION_NUMBER}\stop-server.bat")
  else
    system("pkill -f cruise.jar")
  end
end

task "no-test" do
  ENV["test"]="no"
end

task "start_server" do
  sh "cd scripts; ./start-server.sh"
end
